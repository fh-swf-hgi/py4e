
Objektorientierte Programmierung
================================

Verwaltung größerer Programme
-----------------------------

\index{objektorientiert}

Zu Beginn dieses Buches haben wir vier grundlegende Programmiermuster betrachtet, die wir zur Konstruktion von Programmen verwenden:

* Sequentieller Code
* Bedingter Code (if-Anweisungen)
* Wiederholter Code (Schleifen)
* Wiederverwenden von Code (Funktionen)

In späteren Kapiteln haben wir uns mit einfachen Variablen sowie mit Sammeldatenstrukturen wie Listen, Tupeln und Dictionaries beschäftigt.

Wenn wir Programme erstellen, entwerfen wir Datenstrukturen und schreiben Code, um diese Datenstrukturen zu manipulieren. Es gibt viele Möglichkeiten, Programme zu schreiben, und inzwischen haben wir wahrscheinlich einige Programme geschrieben, die „nicht so elegant“ sind, und andere, die „eleganter“ sind. Auch wenn unsere bisherigen Programme vielleicht klein sind, fängt man an zu erkennen, dass ein gewisses Gespür für Kunst und Ästhetik beim Schreiben von Code hilfreich ist.

Wenn Programme Millionen von Zeilen lang werden, wird es immer wichtiger, Code zu schreiben, der leicht zu verstehen ist. Wenn wir an einem millionenzeiligen Programm arbeiten, können wir nie das gesamte Programm gleichzeitig im Kopf behalten. Wir brauchen Möglichkeiten, große Programme in mehrere kleinere Teile zu zerlegen, damit wir weniger zu beachten haben, wenn wir ein Problem lösen, einen Fehler beheben oder eine neue Funktion hinzufügen.

In gewisser Weise ist die objektorientierte Programmierung eine Möglichkeit, Code so anzuordnen, dass wir in 50 Zeilen des Codes hineinzoomen und ihn verstehen können, während wir die anderen 999.950 Zeilen des Codes für den Moment ignorieren können.

Schon geht's los
----------------

Wie bei vielen Aspekten der Programmierung ist es notwendig, die Konzepte der objektorientierten Programmierung zu erlernen, bevor wir sie effektiv einsetzen können. Dieses Kapitel sollte so angegangen werden, einige Begriffe und Konzepte zu lernen und ein paar einfache Beispiele durcharbeiten, um eine Grundlage für das weitere Lernen zu schaffen.

Das wichtigste Ergebnis dieses Kapitels ist, ein grundlegendes Verständnis dafür zu haben, wie Objekte aufgebaut sind und wie sie funktionieren und vor allem, wie wir die Funktionen von Objekten nutzen, die uns von Python und den Python-Bibliotheken zur Verfügung gestellt werden.

Handhabung von Objekte
----------------------

Wie sich herausstellt, haben wir in diesem Buch die ganze Zeit über Objekte verwendet. Python stellt uns viele eingebaute Objekte zur Verfügung. Hier ist ein einfache Beispiel, bei dem sich die ersten Zeilen sehr einfach und natürlich anfühlen sollten.

\index{list (Objekt)}

\VerbatimInput{../code3/party1.py}

Anstatt sich darauf zu konzentrieren, was diese Zeilen bewirken, sollten wir uns ansehen, was aus der Sicht der objektorientierten Programmierung wirklich passiert. Es sollte uns keine Sorgen bereiten, wenn die folgenden Absätze beim ersten Lesen keinen Sinn ergeben, weil wir noch nicht alle diese Begriffe definiert haben.

Die erste Zeile *konstruiert* ein Objekt vom Typ `list`, die zweite und dritte Zeile *ruft* die `append()`-Methode auf, die vierte Zeile ruft die `sort()`-Methode auf, und die fünfte Zeile *liefert* das Element an Position 0.

Die sechste Zeile ruft die Methode `__getitem__()` in der Liste `stuff` mit einem Parameter 0 auf.

~~~~ {.python}
print (stuff.__getitem__(0))
~~~~

Die siebte Zeile ist ein noch ausführlicherer Weg, um das nullte Element in der Liste abzurufen.

~~~~ {.python}
print (list.__getitem__(stuff,0))
~~~~

In diesem Code rufen wir die Methode `__getitem__` der Klasse `list` auf und *übergeben* die Liste und das Element, das wir aus der Liste abrufen wollen, als Parameter.

Die letzten drei Zeilen des Programms sind gleichwertig, aber es ist bequemer, einfach die Syntax der eckigen Klammern zu verwenden, um ein Element an einer bestimmten Position in einer Liste nachzuschlagen.

Wir können einen Blick auf die Fähigkeiten eines Objekts werfen, indem wir uns die Ausgabe der Funktion `dir()` ansehen:

    >>> stuff = list()
    >>> dir(stuff)
    ['__add__', '__class__', '__contains__', '__delattr__',
    '__delitem__', '__dir__', '__doc__', '__eq__',
    '__format__', '__ge__', '__getattribute__', '__getitem__',
    '__gt__', '__hash__', '__iadd__', '__imul__', '__init__',
    '__iter__', '__le__', '__len__', '__lt__', '__mul__',
    '__ne__', '__new__', '__reduce__', '__reduce_ex__',
    '__repr__', '__reversed__', '__rmul__', '__setattr__',
    '__setitem__', '__sizeof__', '__str__', '__subclasshook__',
    'append', 'clear', 'copy', 'count', 'extend', 'index',
    'insert', 'pop', 'remove', 'reverse', 'sort']
    >>>

Im weiteren Verlauf dieses Kapitels werden alle oben genannten Begriffe definiert. Nach Beendigung sollten die obigen Abschnitte erneut gelesen werden, um das Verständnis zu überprüfen.

Mit Programmen starten
----------------------

Ein Programm in seiner einfachsten Form nimmt Eingaben entgegen, führt Verarbeitungen durch und erzeugt Ausgaben. Das Folgende Programm zum Konvertieren einer Etagennummer demonstriert ein sehr kurzes, aber vollständiges Programm, das alle drei dieser Schritte zeigt.

\VerbatimInput{../code3/elev.py}

Wenn wir ein bisschen mehr über dieses Programm nachdenken, gibt es die „Außenwelt“ und das Programm. Die Eingabe- und Ausgabeaspekte sind die Stellen, an denen das Programm mit der Außenwelt interagiert. Innerhalb des Programms haben wir Code und Daten, um die Aufgabe zu erfüllen, die das Programm lösen soll.

![Ein Programm](height=1.20in@../images/program)

Eine Möglichkeit, objektorientierte Programmierung zu verstehen, ist, dass sie unser Programm in mehrere „Zonen“ aufteilt. Jede Zone enthält etwas Code und Daten (wie ein Programm) und hat gut definierte Interaktionen mit der Außenwelt und den anderen Zonen innerhalb des Programms.

Wenn wir auf das Programm zur Link-Extraktion zurückblicken, bei der wir die BeautifulSoup-Bibliothek verwendet haben, können wir ein Programm sehen, das durch das Verbinden verschiedener Objekte konstruiert wird, um eine Aufgabe zu erfüllen:

\index{BeautifulSoup}
\index{HTML}
\index{Parsen!HTML}

\VerbatimInput{../code3/urllinks.py}

Wir lesen die URL in einen String und übergeben diesen dann an `urllib`, um die Daten aus dem Web abzurufen.  Die `urllib`-Bibliothek verwendet die `socket`-Bibliothek, um die eigentliche Netzwerkverbindung zum Abrufen der Daten herzustellen. Wir nehmen die Zeichenkette, die `urllib` zurückgibt und übergeben sie an BeautifulSoup zum Parsen. BeautifulSoup verwendet das Objekt `html.parser`^[https://docs.python.org/3/library/html.parser.html] und gibt ein Objekt zurück. Wir rufen die Methode `tags()` für das zurückgegebene Objekt auf, die ein Wörterbuch mit Tag-Objekten zurückgibt. Wir laufen in einer Schleife durch die Tags und rufen die Methode `get()` für jedes Tag auf, um das Attribut `href` auszugeben.

Wir können uns so Bild von diesem Programm machen und wie die Objekte zusammenarbeiten.

![Ein Programm als Netzwerk von Objekten](height=1.50in@../images/program-oo)

Das Ziel hier ist es nicht, perfekt zu verstehen, wie dieses Programm funktioniert, sondern zu sehen, wie wir ein Netzwerk aus interagierenden Objekten aufbauen und die Bewegung von Informationen zwischen den Objekten steuern, um ein Programm zu erstellen. Es ist auch wichtig zu bemerken, dass das Programm in den vorherigen Kapiteln, vollständig verstanden werden konnte, ohne überhaupt zu erkennen, dass das Programm die Bewegung von Informationen zwischen den Objekten steuert. Es waren einfach nur Codezeilen, die die Aufgabe erledigten.

Unterteilen eines Problems
--------------------------

Einer der Vorteile des objektorientierten Ansatzes ist, dass er die Komplexität verbergen kann. Zum Beispiel müssen wir zwar wissen, wie man den `urllib`- und BeautifulSoup-Code verwendet, aber wir müssen nicht wissen, wie diese Bibliotheken intern funktionieren. Das erlaubt es uns, uns auf den Teil des Problems zu konzentrieren, den wir lösen müssen, und die anderen Teile des Programms zu ignorieren.

![Ignorieren von Details bei Verwendung eines Objekts](height=1.50in@../images/program-oo-code)

Diese Fähigkeit, sich ausschließlich auf den Teil eines Programms zu fokussieren, der uns interessiert, und den Rest zu ignorieren, ist auch für die Programmierer der Objekte hilfreich. Zum Beispiel müssen die Programmierer, die BeautifulSoup entwickeln, nicht wissen oder sich darum kümmern, wie wir unsere HTML-Seite abrufen, welche Teile wir lesen wollen oder was wir mit den Daten vorhaben, die wir aus der Webseite extrahieren.

![Ignorieren von Details beim Entwickeln eines Objekts](height=1.50in@../images/program-oo-bs4)

Unser erstes Python-Objekt
--------------------------

Auf einer grundlegenden Ebene ist ein Objekt einfach etwas Code plus Datenstrukturen, die kleiner sind als ein ganzes Programm. Das Definieren einer Funktion ermöglicht es uns, ein Stück Code zu speichern und ihm einen Namen zu geben und diesen Code dann später mit dem Namen der Funktion aufzurufen.

Ein Objekt kann eine Reihe von Funktionen (die wir *Methoden* nennen) sowie Daten enthalten, die von diesen Funktionen verwendet werden. Wir nennen Datenelemente, die Teil des Objekts sind, *Attribute*.

\index{class (Schlüsselwort)}\index{Schlüsselwort!class}

Wir verwenden das Schlüsselwort `class`, um die Daten und den Code zu definieren, aus denen jedes der Objekte bestehen wird. Das Schlüsselwort `class` enthält den Namen der Klasse und beginnt einen eingerückten Codeblock, in den die Attribute (Daten) und Methoden (Code) aufgenommen werden.

\VerbatimInput{../code3/party2.py}

Jede Methode sieht aus wie eine Funktion, die mit dem Schlüsselwort `def` beginnt und aus einem eingerückten Codeblock besteht.  Dieses Objekt hat ein Attribut (`x`) und eine Methode (`party`).  Die Methoden haben einen speziellen ersten Parameter, den wir per Konvention `self` nennen.

Genauso wie das Schlüsselwort `def` nicht die Ausführung von Funktionscode bewirkt, wird mit dem Schlüsselwort `class` kein Objekt erzeugt.  Stattdessen definiert das Schlüsselwort `class` eine Art Vorlage, die angibt, welche Daten und welcher Code in jedem Objekt des Typs `PartyAnimal` enthalten sein werden.  Die Klasse ist wie eine Ausstechform und die mit der Klasse erzeugten Objekte sind die Kekse^[Cookie image copyright CC-BY https://www.flickr.com/photos/dinnerseries/23570475099]. Sie kleben keinen Zuckerguss auf die Ausstechform, Sie kleben Zuckerguss auf die Kekse, und Sie können auf jeden Keks einen anderen Zuckerguss kleben.

![Eine Klasse und zwei Objekte](height=2.0in@../photos/cookie_cutter_flickr_Didriks)

Wenn wir uns das Beispielprogramm nun weiter ansehen, sehen wir die erste ausführbare Codezeile:

~~~~ {.python}
an = PartyAnimal()
~~~~

\index{konstruieren}
\index{Objekt}
\index{Instanz}
\index{Klasse}

Hier weisen wir Python an, ein *Objekt* oder eine *Instanz* der Klasse `PartyAnimal` zu konstruieren (d.h. zu erzeugen). Python konstruiert das Objekt mit den richtigen Daten und Methoden und gibt das Objekt zurück, das dann der Variablen `an` zugewiesen wird. In gewisser Weise ähnelt dies der folgenden Zeile, die wir schon die ganze Zeit verwendet haben:

~~~~ {.python}
counts = dict()
~~~~

Hier weisen wir Python an, ein Objekt unter Verwendung der Vorlage `dict` (in Python bereits vorhanden) zu konstruieren, die Instanz des Wörterbuchs zurückzugeben und sie der Variablen `counts` zuzuweisen.

Wenn die Klasse `PartyAnimal` verwendet wird, um ein Objekt zu erstellen, wird die Variable `an` verwendet, um auf dieses Objekt zu zeigen. Wir verwenden `an`, um auf den Code und die Daten für diese bestimmte Instanz der Klasse `PartyAnimal` zuzugreifen.

Jedes Partyanimal-Objekt/jede Partyanimal-Instanz enthält in sich eine Variable `x` und eine Methode namens `party`. Wir rufen die Methode `party` in dieser Zeile auf:

~~~~ {.python}
an.party()
~~~~

Wenn die Methode `party` aufgerufen wird, zeigt der erste Parameter (den wir per Konvention `self` nennen) auf die entsprechende Instanz des `PartyAnimal`-Objekts, von der aus `party` aufgerufen wird. Innerhalb der Methode `party` sehen wir die Zeile:

~~~~ {.python}
self.x = self.x + 1
~~~~

Diese Syntax mit dem Punktoperator besagt, dass mit `x` das Datenattribut des eigenen Objektes gemeint ist. Jedes Mal, wenn `party()` aufgerufen wird, wird der interne `x`-Wert um 1 erhöht und der Wert wird ausgegeben.

Die folgende Zeile ist eine weitere Möglichkeit, die Methode `party` innerhalb des Objekts `an` aufzurufen:

~~~~ {.python}
PartyAnimal.party(an)
~~~~

In dieser Variante greifen wir auf den Code aus der Klasse heraus zu und übergeben explizit den Objektzeiger `an` als ersten Parameter (d. h. `self` innerhalb der Methode). Sie können sich `an.party()` als Kurzform für die obige Zeile vorstellen.

Wenn das Programm ausgeführt wird, erzeugt es die folgende Ausgabe:

~~~~
So far 1
So far 2
So far 3
So far 4
~~~~

Das Objekt wird konstruiert, und die Methode `party` wird viermal aufgerufen, wobei der Wert für `x` innerhalb des Objekts `an` sowohl inkrementiert als auch ausgegeben wird.

Klassen als Datentypen
----------------------

\index{dir (Funktion)}
\index{Datentyp}

Wie wir gesehen haben, haben in Python alle Variablen einen Typ.  Wir können die eingebaute Funktion `dir` verwenden, um die Fähigkeiten einer Variablen zu untersuchen.  Wir können `type` und `dir` auch mit Klassen verwenden, die wir erstellen.

\VerbatimInput{../code3/party3.py}

Wenn dieses Programm ausgeführt wird, erzeugt es die folgende Ausgabe:

~~~~
Type <class '__main__.PartyAnimal'>
Dir  ['__class__', '__delattr__', ...
'__sizeof__', '__str__', '__subclasshook__',
'__weakref__', 'party', 'x']
Type <class 'int'>
Type <class 'method'>
~~~~

Wir können sehen, dass wir mit dem Schlüsselwort `class` einen neuen Typ erstellt haben. Anhand der `dir`-Ausgabe können wir sehen, dass sowohl das Integer-Attribut `x` als auch die Methode `party` im Objekt verfügbar sind.

Lebenszyklus von Objekten
-------------------------

\index{Konstruktor}
\index{Destruktor}
\index{Lebenszyklus von Objekten}\index{Objekt-Lebenszyklus}

In den vorherigen Beispielen definieren wir eine Klasse, verwenden diese Klasse, um eine Instanz dieser Klasse (ein Objekt) zu erstellen, und verwenden dann die Instanz.  Wenn das Programm beendet ist, werden alle Variablen verworfen. Normalerweise denken wir nicht viel über das Erzeugen und Zerstören von Variablen nach, aber umso häufiger, wenn unsere Objekte komplexer werden. Dann müssen wir einige Aktionen innerhalb des Objekts durchführen, um Dinge einzurichten, während das Objekt konstruiert wird, und möglicherweise Dinge aufzuräumen, wenn das Objekt verworfen wird.

Wenn wir wollen, dass unser Objekt diese Momente des Aufbaus und der Zerstörung wahrnimmt, fügen wir unserem Objekt speziell benannte Methoden hinzu:

\VerbatimInput{../code3/party4.py}

Wenn dieses Programm ausgeführt wird, erzeugt es die folgende Ausgabe:

~~~~
I am constructed
So far 1
So far 2
I am destructed 2
an contains 42
~~~~

Während Python unser Objekt konstruiert, ruft es unsere Methode `__init__` auf, um uns die Möglichkeit zu geben, einige Standard- oder Anfangswerte für das Objekt einzurichten. Wenn Python auf diese Zeile stößt:

~~~~
an = 42
~~~~

dann wird unser Objekt tatsächlich „zerstört“, damit es die Variable `an` wiederverwenden kann, um den Wert `42` zu speichern.  Genau in dem Moment, in dem unser `an`-Objekt zerstört wird, wird unser Destruktor-Code (`__del__`) aufgerufen. Wir können nicht verhindern, dass unsere Variable zerstört wird, aber wir können alle notwendigen Aufräumarbeiten durchführen, kurz bevor unser Objekt nicht mehr existiert.

Bei der Entwicklung von Objekten ist es durchaus üblich, einen Konstruktor zu einem Objekt hinzuzufügen, um Anfangswerte für das Objekt einzurichten. Es ist relativ selten, dass man einen Destruktor für ein Objekt benötigt.

Mehrere Instanzen
-----------------

Bisher haben wir eine Klasse definiert, ein einzelnes Objekt konstruiert, dieses Objekt verwendet und dann das Objekt verworfen. Der eigentliche Vorteil in der objektorientierten Programmierung liegt jedoch darin, mehrere Instanzen unserer Klasse konstruieren zu können.

Wenn wir mehrere Objekte aus unserer Klasse konstruieren, möchten wir vielleicht unterschiedliche Anfangswerte für jedes der Objekte einrichten. Wir können Daten an die Konstruktoren übergeben, um jedem Objekt einen anderen Anfangswert zu geben:

\VerbatimInput{../code3/party5.py}

Der Konstruktor hat sowohl einen `self`-Parameter, der auf die Objektinstanz zeigt, als auch zusätzliche Parameter, die beim Aufbau des Objekts an den Konstruktor übergeben werden:

~~~~
s = PartyAnimal('Sally')
~~~~

Innerhalb des Konstruktors kopiert die zweite Zeile den Parameter (`nam`), der in das Attribut `name` innerhalb der Objektinstanz übergeben wird.

~~~~
self.name = nam
~~~~

Die Ausgabe des Programms zeigt, dass jedes der Objekte (`s` und `j`) seine eigenen unabhängigen Kopien von `x` und `nam` enthält:

~~~~
Sally constructed
Jim constructed
Sally party count 1
Jim party count 1
Sally party count 2
~~~~

Vererbung
---------

\index{Vererbung}
\index{Basisklasse}
\index{abgeleitete Klasse}

Eine weitere mächtige Eigenschaft der objektorientierten Programmierung ist die Möglichkeit, eine neue Klasse durch die Erweiterung einer bestehenden Klasse zu erstellen.  Bei der Erweiterung einer Klasse nennen wir die ursprüngliche Klasse die *Basisklasse* und die neue Klasse die *abgeleitete Klasse*.

Für dieses Beispiel verschieben wir unsere Klasse `PartyAnimal` in eine eigene Datei. Dann können wir die Klasse `PartyAnimal` in eine neue Datei importieren und sie wie folgt erweitern:

\VerbatimInput{../code3/party6.py}

Wenn wir die Klasse `CricketFan` definieren, geben wir an, dass wir die Klasse `PartyAnimal` erweitern.  Das bedeutet, dass alle Variablen (`x`) und Methoden (`party`) der Klasse `PartyAnimal` von der Klasse `CricketFan` *geerbt* werden. Zum Beispiel rufen wir innerhalb der Methode `six` in der Klasse `CricketFan` die Methode `party` aus der Klasse `PartyAnimal` auf.

Während das Programm ausgeführt wird, erzeugen wir `s` und `j` als unabhängige Instanzen von `PartyAnimal` und `CricketFan`. Das `j`-Objekt hat zusätzliche Fähigkeiten, welche über die des `s`-Objektes hinausgehen.

~~~~
Sally constructed
Sally party count 1
Jim constructed
Jim party count 1
Jim party count 2
Jim points 6
['__class__', '__delattr__', ... '__weakref__',
'name', 'party', 'points', 'six', 'x']
~~~~

In der `dir`-Ausgabe für das `j`-Objekt (Instanz der Klasse `CricketFan`) sehen wir, dass es die Attribute und Methoden der übergeordneten Klasse hat, sowie die Attribute und Methoden, die hinzugefügt wurden, als die Klasse erweitert wurde, um die Klasse `CricketFan` zu erstellen.

Zusammenfassung
---------------

Dies war eine sehr schnelle Einführung in die objektorientierte Programmierung, die sich hauptsächlich auf die Terminologie und die Syntax der Definition und Verwendung von Objekten konzentriert. Der Code am Anfang dieses Kapitels sollte nun jedoch besser verständlich sein.

\VerbatimInput{../code3/party1.py}

Die erste Zeile konstruiert ein `list`-Objekt.  Wenn Python das Objekt `list` erzeugt, ruft es den Konstruktor (namens `__init__`) auf, um die internen Datenattribute zu initialisieren, die zum Speichern der Listendaten verwendet werden. Wir haben keine Parameter an den Konstruktor übergeben. Wenn der Konstruktor seine Arbeit beendet, verwenden wir die Variable `stuff`, um auf die zurückgegebene Instanz der Klasse `list` zu zeigen.

Die zweite und dritte Zeile rufen die Methode `append` mit einem Parameter auf, um ein neues Element am Ende der Liste hinzuzufügen, indem die Attribute innerhalb von `stuff` aktualisiert werden. Dann, in der vierten Zeile, rufen wir die Methode `sort` ohne Parameter auf, um die Daten innerhalb des `stuff`-Objekts zu sortieren.

Wir geben dann den ersten Eintrag in der Liste aus, indem wir die eckigen Klammern verwenden, die eine Abkürzung für den Aufruf der Methode `__getitem__` innerhalb von `stuff` sind.  Dies ist äquivalent zum Aufruf der Methode `__getitem__` in der Klasse `list` und der Übergabe des Objekts `stuff` als ersten Parameter und der gesuchten Position als zweiten Parameter.

Am Ende des Programms wird das `stuff`-Objekt verworfen, aber nicht bevor der Destruktor (namens `__del__`) aufgerufen wurde, damit das Objekt bei Bedarf Aufräumarbeiten durchführen kann.

Das sind die Grundlagen der objektorientierten Programmierung. Es gibt viele zusätzliche Details, wie man objektorientierte Ansätze bei der Entwicklung großer Anwendungen und Bibliotheken am besten einsetzt, die den Rahmen dieses Kapitels sprengen würden.^[Wenn Sie neugierig sind, wo die Klasse `list` definiert ist, werfen Sie einen Blick auf (die URL wird sich hoffentlich nicht ändern) https://github.com/python/cpython/blob/master/Objects/listobject.c - die Klasse list ist in einer Sprache namens „C“ geschrieben.]

Glossar
-------

Attribut
:   Eine Variable, die Teil einer Klasse ist.
\index{Attribut}

Klasse
:   Eine Art Vorlage, die zum Konstruieren eines Objekts verwendet werden kann. Sie definiert die Attribute und Methoden, aus denen das Objekt bestehen wird.
\index{Klasse}

abgeleitete Klasse
:   Eine neue Klasse, die erstellt wird, wenn eine übergeordnete Klasse erweitert wird. Die untergeordnete Klasse erbt alle Attribute und Methoden der übergeordneten Klasse.
\index{abgeleitete Klasse}

Konstruktor
:   Eine optionale, speziell benannte Methode (`__init__`), die in dem Moment aufgerufen wird, in dem eine Klasse verwendet wird, um ein Objekt zu konstruieren. Normalerweise wird dies verwendet, um Anfangswerte für das Objekt einzurichten.
\index{Konstruktor}

Destruktor
:   Eine optionale, speziell benannte Methode (`__del__`), die in dem Moment aufgerufen wird, kurz bevor ein Objekt zerstört wird. Destruktoren werden selten verwendet.
\index{Destruktor}

Vererbung
:   Wenn wir eine neue abgeleitete Klasse erstellen, indem wir eine vorhandene Klasse (Basisklasse) erweitern.  Die untergeordnete Klasse hat alle Attribute und Methoden der übergeordneten Klasse plus zusätzliche Attribute und Methoden, die von der untergeordneten Klasse definiert werden.
\index{Vererbung}

Methode
:   Eine Funktion, die in einer Klasse und den Objekten, die aus der Klasse konstruiert werden, enthalten ist.
\index{Methode}

Objekt
:   Eine Instanz einer Klasse. Ein Objekt enthält alle Attribute und Methoden, die von der Klasse definiert wurden. Häufig werden die Begriffe „Instanz“ und „Objekt“ austauschbar verwendet.
\index{Objekt}

Basisklasse
:   Die Klasse, die erweitert wird, um eine neue abgeleitete Klasse zu erstellen. Die übergeordnete Klasse bringt alle ihre Methoden und Attribute in die neue untergeordnete Klasse ein.
\index{Basisklasse}

